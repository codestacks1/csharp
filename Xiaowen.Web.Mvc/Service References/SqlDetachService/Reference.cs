//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Xiaowen.Web.Mvc.SqlDetachService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SqlDetachService.ISqlDetach")]
    public interface ISqlDetach {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlDetach/GetData", ReplyAction="http://tempuri.org/ISqlDetach/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISqlDetach/GetData", ReplyAction="http://tempuri.org/ISqlDetach/GetDataResponse")]
        System.IAsyncResult BeginGetData(int value, System.AsyncCallback callback, object asyncState);
        
        string EndGetData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlDetach/GetDataUsingDataContract", ReplyAction="http://tempuri.org/ISqlDetach/GetDataUsingDataContractResponse")]
        Xiaowen.Service.SqlDetachApi.CompositeType GetDataUsingDataContract(Xiaowen.Service.SqlDetachApi.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISqlDetach/GetDataUsingDataContract", ReplyAction="http://tempuri.org/ISqlDetach/GetDataUsingDataContractResponse")]
        System.IAsyncResult BeginGetDataUsingDataContract(Xiaowen.Service.SqlDetachApi.CompositeType composite, System.AsyncCallback callback, object asyncState);
        
        Xiaowen.Service.SqlDetachApi.CompositeType EndGetDataUsingDataContract(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlDetach/QueryAuthor", ReplyAction="http://tempuri.org/ISqlDetach/QueryAuthorResponse")]
        void QueryAuthor(Xiaowen.Personal.SqlDetach.XwDoEnum xwDoWhileEvent, Xiaowen.Personal.SqlDetach.Dbo.DboHandler sender, Xiaowen.Personal.SqlDetach.XwWhereClauseSchema[] whereParams);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISqlDetach/QueryAuthor", ReplyAction="http://tempuri.org/ISqlDetach/QueryAuthorResponse")]
        System.IAsyncResult BeginQueryAuthor(Xiaowen.Personal.SqlDetach.XwDoEnum xwDoWhileEvent, Xiaowen.Personal.SqlDetach.Dbo.DboHandler sender, Xiaowen.Personal.SqlDetach.XwWhereClauseSchema[] whereParams, System.AsyncCallback callback, object asyncState);
        
        void EndQueryAuthor(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISqlDetachChannel : Xiaowen.Web.Mvc.SqlDetachService.ISqlDetach, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataUsingDataContractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataUsingDataContractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Xiaowen.Service.SqlDetachApi.CompositeType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Xiaowen.Service.SqlDetachApi.CompositeType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SqlDetachClient : System.ServiceModel.ClientBase<Xiaowen.Web.Mvc.SqlDetachService.ISqlDetach>, Xiaowen.Web.Mvc.SqlDetachService.ISqlDetach {
        
        private BeginOperationDelegate onBeginGetDataDelegate;
        
        private EndOperationDelegate onEndGetDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDataUsingDataContractDelegate;
        
        private EndOperationDelegate onEndGetDataUsingDataContractDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataUsingDataContractCompletedDelegate;
        
        private BeginOperationDelegate onBeginQueryAuthorDelegate;
        
        private EndOperationDelegate onEndQueryAuthorDelegate;
        
        private System.Threading.SendOrPostCallback onQueryAuthorCompletedDelegate;
        
        public SqlDetachClient() {
        }
        
        public SqlDetachClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SqlDetachClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SqlDetachClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SqlDetachClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetDataCompletedEventArgs> GetDataCompleted;
        
        public event System.EventHandler<GetDataUsingDataContractCompletedEventArgs> GetDataUsingDataContractCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> QueryAuthorCompleted;
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetData(int value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetData(value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetData(System.IAsyncResult result) {
            return base.Channel.EndGetData(result);
        }
        
        private System.IAsyncResult OnBeginGetData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int value = ((int)(inValues[0]));
            return this.BeginGetData(value, callback, asyncState);
        }
        
        private object[] OnEndGetData(System.IAsyncResult result) {
            string retVal = this.EndGetData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataCompleted(object state) {
            if ((this.GetDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataAsync(int value) {
            this.GetDataAsync(value, null);
        }
        
        public void GetDataAsync(int value, object userState) {
            if ((this.onBeginGetDataDelegate == null)) {
                this.onBeginGetDataDelegate = new BeginOperationDelegate(this.OnBeginGetData);
            }
            if ((this.onEndGetDataDelegate == null)) {
                this.onEndGetDataDelegate = new EndOperationDelegate(this.OnEndGetData);
            }
            if ((this.onGetDataCompletedDelegate == null)) {
                this.onGetDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataDelegate, new object[] {
                        value}, this.onEndGetDataDelegate, this.onGetDataCompletedDelegate, userState);
        }
        
        public Xiaowen.Service.SqlDetachApi.CompositeType GetDataUsingDataContract(Xiaowen.Service.SqlDetachApi.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDataUsingDataContract(Xiaowen.Service.SqlDetachApi.CompositeType composite, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDataUsingDataContract(composite, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Xiaowen.Service.SqlDetachApi.CompositeType EndGetDataUsingDataContract(System.IAsyncResult result) {
            return base.Channel.EndGetDataUsingDataContract(result);
        }
        
        private System.IAsyncResult OnBeginGetDataUsingDataContract(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Xiaowen.Service.SqlDetachApi.CompositeType composite = ((Xiaowen.Service.SqlDetachApi.CompositeType)(inValues[0]));
            return this.BeginGetDataUsingDataContract(composite, callback, asyncState);
        }
        
        private object[] OnEndGetDataUsingDataContract(System.IAsyncResult result) {
            Xiaowen.Service.SqlDetachApi.CompositeType retVal = this.EndGetDataUsingDataContract(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataUsingDataContractCompleted(object state) {
            if ((this.GetDataUsingDataContractCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataUsingDataContractCompleted(this, new GetDataUsingDataContractCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataUsingDataContractAsync(Xiaowen.Service.SqlDetachApi.CompositeType composite) {
            this.GetDataUsingDataContractAsync(composite, null);
        }
        
        public void GetDataUsingDataContractAsync(Xiaowen.Service.SqlDetachApi.CompositeType composite, object userState) {
            if ((this.onBeginGetDataUsingDataContractDelegate == null)) {
                this.onBeginGetDataUsingDataContractDelegate = new BeginOperationDelegate(this.OnBeginGetDataUsingDataContract);
            }
            if ((this.onEndGetDataUsingDataContractDelegate == null)) {
                this.onEndGetDataUsingDataContractDelegate = new EndOperationDelegate(this.OnEndGetDataUsingDataContract);
            }
            if ((this.onGetDataUsingDataContractCompletedDelegate == null)) {
                this.onGetDataUsingDataContractCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataUsingDataContractCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataUsingDataContractDelegate, new object[] {
                        composite}, this.onEndGetDataUsingDataContractDelegate, this.onGetDataUsingDataContractCompletedDelegate, userState);
        }
        
        public void QueryAuthor(Xiaowen.Personal.SqlDetach.XwDoEnum xwDoWhileEvent, Xiaowen.Personal.SqlDetach.Dbo.DboHandler sender, Xiaowen.Personal.SqlDetach.XwWhereClauseSchema[] whereParams) {
            base.Channel.QueryAuthor(xwDoWhileEvent, sender, whereParams);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginQueryAuthor(Xiaowen.Personal.SqlDetach.XwDoEnum xwDoWhileEvent, Xiaowen.Personal.SqlDetach.Dbo.DboHandler sender, Xiaowen.Personal.SqlDetach.XwWhereClauseSchema[] whereParams, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginQueryAuthor(xwDoWhileEvent, sender, whereParams, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndQueryAuthor(System.IAsyncResult result) {
            base.Channel.EndQueryAuthor(result);
        }
        
        private System.IAsyncResult OnBeginQueryAuthor(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Xiaowen.Personal.SqlDetach.XwDoEnum xwDoWhileEvent = ((Xiaowen.Personal.SqlDetach.XwDoEnum)(inValues[0]));
            Xiaowen.Personal.SqlDetach.Dbo.DboHandler sender = ((Xiaowen.Personal.SqlDetach.Dbo.DboHandler)(inValues[1]));
            Xiaowen.Personal.SqlDetach.XwWhereClauseSchema[] whereParams = ((Xiaowen.Personal.SqlDetach.XwWhereClauseSchema[])(inValues[2]));
            return this.BeginQueryAuthor(xwDoWhileEvent, sender, whereParams, callback, asyncState);
        }
        
        private object[] OnEndQueryAuthor(System.IAsyncResult result) {
            this.EndQueryAuthor(result);
            return null;
        }
        
        private void OnQueryAuthorCompleted(object state) {
            if ((this.QueryAuthorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.QueryAuthorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void QueryAuthorAsync(Xiaowen.Personal.SqlDetach.XwDoEnum xwDoWhileEvent, Xiaowen.Personal.SqlDetach.Dbo.DboHandler sender, Xiaowen.Personal.SqlDetach.XwWhereClauseSchema[] whereParams) {
            this.QueryAuthorAsync(xwDoWhileEvent, sender, whereParams, null);
        }
        
        public void QueryAuthorAsync(Xiaowen.Personal.SqlDetach.XwDoEnum xwDoWhileEvent, Xiaowen.Personal.SqlDetach.Dbo.DboHandler sender, Xiaowen.Personal.SqlDetach.XwWhereClauseSchema[] whereParams, object userState) {
            if ((this.onBeginQueryAuthorDelegate == null)) {
                this.onBeginQueryAuthorDelegate = new BeginOperationDelegate(this.OnBeginQueryAuthor);
            }
            if ((this.onEndQueryAuthorDelegate == null)) {
                this.onEndQueryAuthorDelegate = new EndOperationDelegate(this.OnEndQueryAuthor);
            }
            if ((this.onQueryAuthorCompletedDelegate == null)) {
                this.onQueryAuthorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnQueryAuthorCompleted);
            }
            base.InvokeAsync(this.onBeginQueryAuthorDelegate, new object[] {
                        xwDoWhileEvent,
                        sender,
                        whereParams}, this.onEndQueryAuthorDelegate, this.onQueryAuthorCompletedDelegate, userState);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SqlDetachService.ISqlDetachBase")]
    public interface ISqlDetachBase {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlDetachBase/GetSqlDetachBase", ReplyAction="http://tempuri.org/ISqlDetachBase/GetSqlDetachBaseResponse")]
        void GetSqlDetachBase();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISqlDetachBase/GetSqlDetachBase", ReplyAction="http://tempuri.org/ISqlDetachBase/GetSqlDetachBaseResponse")]
        System.IAsyncResult BeginGetSqlDetachBase(System.AsyncCallback callback, object asyncState);
        
        void EndGetSqlDetachBase(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISqlDetachBaseChannel : Xiaowen.Web.Mvc.SqlDetachService.ISqlDetachBase, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SqlDetachBaseClient : System.ServiceModel.ClientBase<Xiaowen.Web.Mvc.SqlDetachService.ISqlDetachBase>, Xiaowen.Web.Mvc.SqlDetachService.ISqlDetachBase {
        
        private BeginOperationDelegate onBeginGetSqlDetachBaseDelegate;
        
        private EndOperationDelegate onEndGetSqlDetachBaseDelegate;
        
        private System.Threading.SendOrPostCallback onGetSqlDetachBaseCompletedDelegate;
        
        public SqlDetachBaseClient() {
        }
        
        public SqlDetachBaseClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SqlDetachBaseClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SqlDetachBaseClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SqlDetachBaseClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> GetSqlDetachBaseCompleted;
        
        public void GetSqlDetachBase() {
            base.Channel.GetSqlDetachBase();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSqlDetachBase(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSqlDetachBase(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndGetSqlDetachBase(System.IAsyncResult result) {
            base.Channel.EndGetSqlDetachBase(result);
        }
        
        private System.IAsyncResult OnBeginGetSqlDetachBase(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetSqlDetachBase(callback, asyncState);
        }
        
        private object[] OnEndGetSqlDetachBase(System.IAsyncResult result) {
            this.EndGetSqlDetachBase(result);
            return null;
        }
        
        private void OnGetSqlDetachBaseCompleted(object state) {
            if ((this.GetSqlDetachBaseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSqlDetachBaseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSqlDetachBaseAsync() {
            this.GetSqlDetachBaseAsync(null);
        }
        
        public void GetSqlDetachBaseAsync(object userState) {
            if ((this.onBeginGetSqlDetachBaseDelegate == null)) {
                this.onBeginGetSqlDetachBaseDelegate = new BeginOperationDelegate(this.OnBeginGetSqlDetachBase);
            }
            if ((this.onEndGetSqlDetachBaseDelegate == null)) {
                this.onEndGetSqlDetachBaseDelegate = new EndOperationDelegate(this.OnEndGetSqlDetachBase);
            }
            if ((this.onGetSqlDetachBaseCompletedDelegate == null)) {
                this.onGetSqlDetachBaseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSqlDetachBaseCompleted);
            }
            base.InvokeAsync(this.onBeginGetSqlDetachBaseDelegate, null, this.onEndGetSqlDetachBaseDelegate, this.onGetSqlDetachBaseCompletedDelegate, userState);
        }
    }
}
